# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches:
      - main
      - master
      - develop
      - "releases/**"
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  checks: write

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        id: dependencies
        run: sudo apt install -y clang llvm

      - name: Build Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: 1.87.0
          platform_version: 20.04
          link: shared

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=/usr/bin/clang++
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test Boost
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # run: ctest -C ${{env.BUILD_TYPE}}
        run: ./test_foo
        env:
          LLVM_PROFILE_FILE: "build/btest.profraw"

      - name: Test GTest
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # run: ctest -C ${{env.BUILD_TYPE}}
        run: ./hello_test
        env:
          GTEST_OUTPUT: "xml:build/test-results/google-test/"
          LLVM_PROFILE_FILE: "build/gtest.profraw"

      - name: Print coverage gens
        run: tree ${{github.workspace}}/build

      - name: Compile coverage
        working-directory: ${{github.workspace}}/build
        run: llvm-profdata merge -sparse -output=${{github.workspace}}/build/${PROFDATA_FILE} ${{github.workspace}}/build/**/*.profraw
        env:
          PROFDATA_FILE: "coverage.profdata"

      - name: Compile coverage
        working-directory: ${{github.workspace}}/build
        run: llvm-cov show ${{github.workspace}}/build -instr-profile=${PROFDATA_FILE} -format=html -output-dir=${CMAKE_BINARY_DIR}/coverage_report
        env:
          PROFDATA_FILE: "coverage.profdata"

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "**/build/test-results/google-test/*.xml"
          include_passed: "true"

      - name: Publish Coverage Report
        uses: pavi2410/html-preview-action@v4
        with:
          html_file: "${{github.workspace}}/build/coverage_report"
          job_summary: true

  static-analisis:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Build Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: 1.87.0
          platform_version: 20.04
          link: shared

      - name: Install Clang Tools
        run: sudo apt install clang clang-tools

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=/usr/bin/clang++
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Analyze
        # Build your program with the given configuration
        run: scan-build -k -v --force-analyze-debug-code cmake --build ${{github.workspace}}/build

      # - name: Analyze src
      #   # Build your program with the given configuration
      #   run: scan-build ${{github.workspace}}/src/*/*.cpp ${{github.workspace}}/src/*.cpp

  #sonarqube:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #      with:
  #        # Disabling shallow clones is recommended for improving the relevancy of reporting
  #        fetch-depth: 0
  #    - name: Official SonarQube Scan
  #      uses: SonarSource/sonarqube-scan-action@v5.0.0
  #      env:
  #        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  code-checker:
    runs-on: ubuntu-latest
    steps:
      # Check YOUR project out!
      - name: "Check out repository"
        uses: actions/checkout@v4

      - name: Build Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: 1.87.0
          platform_version: 20.04
          link: shared

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER=/usr/bin/clang++
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      # Run the analysis
      - uses: whisperity/codechecker-analysis-action@v1
        id: codechecker
        with:
          logfile: ${{ github.workspace }}/build/compile_commands.json

      # Upload the results to the CI.
      - uses: actions/upload-artifact@v4
        with:
          name: "CodeChecker Bug Reports"
          path: ${{ steps.codechecker.outputs.result-html-dir }}

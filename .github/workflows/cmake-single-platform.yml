name: Main generic workflow

on:
  push:
    branches:
      - main
      - master
      - develop
      - "releases/**"
  pull_request:
    types: [opened, synchronize, reopened]

# We need permissions to upload artifacts
permissions:
  contents: read
  checks: write

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Configure checkout@v4
        uses: actions/checkout@v4

      - name: Install apt dependencies [clang, llvm]
        id: dependencies
        run: sudo apt install -y clang llvm libboost-all-dev

      # - name: Install Boost
      #   id: install-boost
      #   uses: MarkusJx/install-boost@v2
      #   with:
      #     boost_version: 1.87.0
      #     platform_version: 20.04
      #     link: shared

      - name: Recover cached Quantlib
        id: cache-quantlib
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/QuantLib-1.37
          key: ${{ runner.os }}-quantlib

      - name: Generate Quantlib
        if: steps.cache-quantlib.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/lballabio/QuantLib/releases/download/v1.37/QuantLib-1.37.tar.gz -o QuantLib-1.37.tar.gz
          tar xzf QuantLib-1.37.tar.gz
          echo "QuantLib Downloaded ✅"
          cd QuantLib-1.37
          ./configure --with-boost-include=${{env.BOOST_ROOT}}
          echo "QuantLib Build Setup ✅"
          make
          echo "QuantLib Built ✅"
          sudo make install
          echo "QuantLib Installed ✅"
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=/usr/bin/clang++
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test Boost
        working-directory: ${{github.workspace}}/build
        run: ./test_foo
        env:
          LLVM_PROFILE_FILE: "build/btest.profraw"

      - name: Test GTest
        working-directory: ${{github.workspace}}/build
        run: ./hello_test
        env:
          GTEST_OUTPUT: "xml:build/test-results/google-test/"
          LLVM_PROFILE_FILE: "build/gtest.profraw"

      - name: Compile coverage
        working-directory: ${{github.workspace}}/build
        run: llvm-profdata merge -sparse -output=${{github.workspace}}/build/${PROFDATA_FILE} ${{github.workspace}}/build/**/*.profraw
        env:
          PROFDATA_FILE: "coverage.profdata"

      - name: Generate coverage Report
        working-directory: ${{github.workspace}}/build
        run: llvm-cov show ${{github.workspace}}/build/libTestingLib.so -instr-profile=${PROFDATA_FILE} -format=html -output-dir=${{github.workspace}}/build/coverage_report
        env:
          PROFDATA_FILE: "coverage.profdata"

      - name: Print coverage gens
        run: tree ${{github.workspace}}/build

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "**/build/test-results/google-test/*.xml"
          include_passed: "true"

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: "${{github.workspace}}/build/coverage_report/index.html"

  static-analisis:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Build Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: 1.87.0
          platform_version: 20.04
          link: shared

      - name: Install Clang Tools
        run: sudo apt install clang clang-tools

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=/usr/bin/clang++
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Analyze
        # Build your program with the given configuration
        run: scan-build -k -v --force-analyze-debug-code cmake --build ${{github.workspace}}/build

      # - name: Analyze src
      #   # Build your program with the given configuration
      #   run: scan-build ${{github.workspace}}/src/*/*.cpp ${{github.workspace}}/src/*.cpp
  sonarqube:
    name: Deploy to sonarqube cloud
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4

      - name: Install dependencies
        id: dependencies
        run: sudo apt install -y clang llvm

      - name: Build Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: 1.87.0
          platform_version: 20.04
          link: shared

      - name: Run Build Wrapper
        run: |
          mkdir build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=/usr/bin/clang++ 
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Test Boost
        working-directory: ${{github.workspace}}/build
        run: ./test_instrumentos
        env:
          LLVM_PROFILE_FILE: "build/btest.profraw"

      - name: Test GTest
        working-directory: ${{github.workspace}}/build
        run: ./hello_test
        env:
          GTEST_OUTPUT: "xml:build/test-results/google-test/"
          LLVM_PROFILE_FILE: "build/gtest.profraw"

      - name: Compile coverage
        working-directory: ${{github.workspace}}/build
        run: llvm-profdata merge -sparse -output=${{github.workspace}}/build/${PROFDATA_FILE} ${{github.workspace}}/build/**/*.profraw
        env:
          PROFDATA_FILE: "coverage.profdata"

      - name: Generate coverage Report
        working-directory: ${{github.workspace}}/build
        run: llvm-cov show --show-branches=count ${{github.workspace}}/build/libTestingLib.so --object ${{github.workspace}}/build/libInstrumentos.so -instr-profile=${PROFDATA_FILE} > coverage.txt
        env:
          PROFDATA_FILE: "coverage.profdata"

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
            --define sonar.cfamily.llvm-cov.reportPath=${{github.workspace}}/build/coverage.txt
